@page "{id?}"
@using System.ComponentModel.DataAnnotations
@model ProdutoModel
@{
    ViewData["Title"] = "Produto";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery

<div class="container my-5">
    <!-- Nome do Produto -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="text-uppercase fw-bold">@Model.Produto?.ProductName</h2>
        </div>
    </div>

    <!-- Conteúdo -->
    <div class="row">
        <div class="col-12">

            <!-- Aba: PRODUTO -->
            <div class="info-tab" id="tab1">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase" style="width: 100%;" onclick="toggleTab(this,'tab1')">PRODUTO</span>
                    <div class="d-flex gap-1">
                        <!--button type="button" class="icon-btn text-primary" title="Salvar imagens" onclick="enviarImagens('PRODUTO');">
                            <img src="~/images/icons/sav-image.png" alt="Salvar" class="icon-img" />
                        </button-->
                        <!--button id="toggleSort_PRODUTO" class="btn btn-outline-secondary btn-sm mb-2"
                                onclick="toggleReordenacao('PRODUTO')">
                            🔒 Reordenar
                        </button-->

                        <button type="button" class="icon-btn text-success" title="Adicionar" onclick="triggerImageInput('PRODUTO')">
                            <img src="~/images/icons/add-image.png" alt="Adicionar" class="icon-img"/>
                        </button>
                        <button type="button" class="icon-btn text-danger" title="Remover" onclick="removeCurrentImage('PRODUTO');">
                            <img src="~/images/icons/rem-image.png" alt="Remover" class="icon-img" />
                        </button>
                        <input type="file" id="imageInputCamera_PRODUTO" accept="image/*" capture="environment" style="display:none" onchange="handleImageSelected(event, 'PRODUTO')">
                        <input type="file" id="imageInputGallery_PRODUTO" accept="image/*" style="display:none" onchange="handleImageSelected(event, 'PRODUTO')">
                    </div>
                </div>

                <div class="info-content px-2 py-2">
                    <div class="text-center">
                        <!-- Imagem principal -->
                        <div class="zoom-container mx-auto mb-3" data-finalidade="PRODUTO">
                            <img id="mainImage_PRODUTO" src="@(Model.ImgProduto?.FirstOrDefault() ?? Url.Content("~/img/not-found.jpg"))" class="zoom-img" />
                        </div>

                        <!-- Carrossel de thumbnails com drag-and-drop -->
                        <div class="thumbnail-row d-flex align-items-center justify-content-center position-relative">

                            @if (Model.ImgProduto?.Any() == true)
                            {
                                <!-- Botão anterior (oculto em mobile) -->
                                <button class="carousel-btn prev" onclick="scrollThumbnail(-1, 'PRODUTO')">&#10094;</button>

                                <!-- Container de miniaturas -->
                                <div id="thumbContainer_PRODUTO" class="thumb-container-horizontal d-flex gap-2">
                                    @for (int i = 0; i < Model.ImgProduto.Count; i++)
                                    {
                                        var img = Model.ImgProduto[i];
                                        <div class="thumb-wrapper" data-index="@i" onclick="setMainImage('@img','PRODUTO')">
                                            <img src="@img"
                                                 class="img-thumbnail thumbnail-img"
                                                 style="cursor: move;"
                                                 />
                                        </div>
                                    }
                                </div>

                                <!-- Botão próximo (oculto em mobile) -->
                                <button class="carousel-btn next" onclick="scrollThumbnail(1, 'PRODUTO')">&#10095;</button>
                            }
                            else
                            {
                                <div id="thumbContainer_PRODUTO" class="thumb-container-horizontal d-flex gap-2">
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Aba: EMBALAGEM -->
            <div class="info-tab" id="tab2">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase" style="width: 100%;" onclick="toggleTab(this,'tab2')">EMBALAGEM</span>
                    <div class="d-flex gap-1">
                        <!--button type="button" class="icon-btn text-primary" title="Salvar imagens" onclick="enviarImagens('EMBALAGEM');">
                            <img src="~/images/icons/sav-image.png" alt="Salvar" class="icon-img" />
                        </button-->
                        <button type="button" class="icon-btn text-success" title="Adicionar" onclick="triggerImageInput('EMBALAGEM')">
                            <img src="~/images/icons/add-image.png" alt="Adicionar" class="icon-img" />
                        </button>
                        <button type="button" class="icon-btn text-danger" title="Remover" onclick="removeCurrentImage('EMBALAGEM');">
                            <img src="~/images/icons/rem-image.png" alt="Remover" class="icon-img" />
                        </button>
                        <input type="file" id="imageInputCamera_EMBALAGEM" accept="image/*" capture="environment" style="display:none" onchange="handleImageSelected(event, 'EMBALAGEM')">
                        <input type="file" id="imageInputGallery_EMBALAGEM" accept="image/*" style="display:none" onchange="handleImageSelected(event, 'EMBALAGEM')">
                    </div>
                </div>

                <div class="info-content px-2 py-2">
                    <div class="text-center">
                        <div class="zoom-container mx-auto mb-3" data-finalidade="EMBALAGEM">
                            <img id="mainImage_EMBALAGEM" src="@(Model.ImgPackage?.FirstOrDefault() ?? Url.Content("~/img/not-found.jpg"))" class="zoom-img" />
                        </div>
                        <div class="thumbnail-row d-flex align-items-center justify-content-center position-relative">
                            @if (Model.ImgPackage?.Any() == true)
                            {
                                <!-- Botão anterior (oculto em mobile) -->
                                <button class="carousel-btn prev" onclick="scrollThumbnail(-1, 'EMBALAGEM')">&#10094;</button>

                                <!-- Container de miniaturas -->
                                <div id="thumbContainer_EMBALAGEM" class="thumb-container-horizontal d-flex gap-2">
                                    @for (int i = 0; i < Model.ImgPackage.Count; i++)
                                    {
                                        var img = Model.ImgPackage[i];
                                        <div class="thumb-wrapper" data-index="@i" onclick="setMainImage('@img','EMBALAGEM')">
                                            <img src="@img"
                                                 class="img-thumbnail thumbnail-img"
                                                 style="cursor: move;" />
                                        </div>
                                    }
                                </div>

                                <!-- Botão próximo (oculto em mobile) -->
                                <button class="carousel-btn next" onclick="scrollThumbnail(1, 'EMBALAGEM')">&#10095;</button>
                            }
                            else
                            {
                                <div id="thumbContainer_EMBALAGEM" class="thumb-container-horizontal d-flex gap-2">
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Aba: PALETIZACAO -->
            <div class="info-tab" id="tab3">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase" style="width: 100%;" onclick="toggleTab(this,'tab3')">PALETIZAÇÃO</span>
                    <div class="d-flex gap-1">
                        <!--button type="button" class="icon-btn text-primary" title="Salvar imagens" onclick="enviarImagens('PALETIZACAO');">
                            <img src="~/images/icons/sav-image.png" alt="Salvar" class="icon-img" />
                        </button-->
                        <button type="button" class="icon-btn text-success" title="Adicionar" onclick="triggerImageInput('PALETIZACAO')">
                            <img src="~/images/icons/add-image.png" alt="Adicionar" class="icon-img" />
                        </button>
                        <button type="button" class="icon-btn text-danger" title="Remover" onclick="removeCurrentImage('PALETIZACAO');">
                            <img src="~/images/icons/rem-image.png" alt="Remover" class="icon-img" />
                        </button>
                        <input type="file" id="imageInputCamera_PALETIZACAO" accept="image/*" capture="environment" style="display:none" onchange="handleImageSelected(event, 'PALETIZACAO')">
                        <input type="file" id="imageInputGallery_PALETIZACAO" accept="image/*" style="display:none" onchange="handleImageSelected(event, 'PALETIZACAO')">
                    </div>
                </div>

                <div class="info-content px-2 py-2">
                    <div class="text-center">
                        <div class="zoom-container mx-auto mb-3" data-finalidade="PALETIZACAO">
                            <img id="mainImage_PALETIZACAO" src="@(Model.ImgPallet?.FirstOrDefault() ?? Url.Content("~/img/not-found.jpg"))" class="zoom-img" />
                        </div>
                        <div class="thumbnail-row d-flex align-items-center justify-content-center position-relative">
                            @if (Model.ImgPallet?.Any() == true)
                            {
                                <!-- Botão anterior (oculto em mobile) -->
                                <button class="carousel-btn prev" onclick="scrollThumbnail(-1, 'PALETIZACAO')">&#10094;</button>

                                <!-- Container de miniaturas -->
                                <div id="thumbContainer_PALETIZACAO" class="thumb-container-horizontal d-flex gap-2">
                                    @for (int i = 0; i < Model.ImgPallet.Count; i++)
                                    {
                                        var img = Model.ImgPallet[i];
                                        <div class="thumb-wrapper" data-index="@i" onclick="setMainImage('@img','PALETIZACAO')">
                                            <img src="@img"
                                                 class="img-thumbnail thumbnail-img"
                                                 style="cursor: move;" />
                                        </div>
                                    }
                                </div>

                                <!-- Botão próximo (oculto em mobile) -->
                                <button class="carousel-btn next" onclick="scrollThumbnail(1, 'PALETIZACAO')">&#10095;</button>
                            }
                            else
                            {
                                <div id="thumbContainer_PALETIZACAO" class="thumb-container-horizontal d-flex gap-2">
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Outras abas -->
            <div class="info-tab" id="tab4">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase w-100" onclick="toggleTab(this, 'tab4')">
                        INFORMAÇÕES DO PRODUTO
                    </span>
                    <div class="d-flex gap-1">
                        <!-- Botões ou ícones opcionais aqui -->
                    </div>
                </div>
                <div class="info-content px-2 py-2">
                    <div class="row border-bottom py-1">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Produto.ProductId), TypeProduct)</div>
                        <div class="col-7">@Model.Produto?.ProductId</div>
                    </div>
                    <div class="row border-bottom py-1">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Produto.ProductName), TypeProduct)</div>
                        <div class="col-7">@Model.Produto?.ProductName</div>
                    </div>
                    <div class="row py-1">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Produto.Barcode), TypeProduct)</div>
                        <div class="col-7">@Model.Produto?.Barcode</div>
                    </div>
                </div>
            </div>

            <div class="info-tab" id="tab5">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase w-100" onclick="toggleTab(this, 'tab5')">
                        DIMENSÕES
                    </span>
                    <div class="d-flex gap-1">
                        <!-- (Se quiser colocar botão de ação aqui) -->
                    </div>
                </div>
                <div class="info-content px-2 py-2">
                    @if (Model.Invent != null)
                    {
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.NetWeight), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.NetWeight?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.TaraWeight), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.TaraWeight?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.GrossWeight), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.GrossWeight?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.GrossDepth), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.GrossDepth?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.GrossWidth), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.GrossWidth?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.GrossHeight), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.GrossHeight?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.UnitVolume), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.UnitVolume?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.UnitVolumeML), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.UnitVolumeML?.ToString()</div>
                        </div>
                        <div class="row border-bottom py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.NrOfItems), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.NrOfItems?.ToString()</div>
                        </div>
                        <div class="row py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(@Model.Invent.UnitId), TypeInvent)</div>
                            <div class="col-7">@Model.Invent.UnitId</div>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Nenhuma informação disponível.</p>
                    }
                </div>
            </div>

            <div class="info-tab" id="tab6">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase w-100" onclick="toggleTab(this, 'tab6')">
                        INFORMAÇÕES FISCAIS
                    </span>
                    <div class="d-flex gap-1">
                        <!-- Botões de ação, se houver -->
                    </div>
                </div>
                <div class="info-content px-2 py-2">
                    @if (Model.TaxInformation != null)
                    {
                        <div class="row py-1 border-bottom">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.TaxationOrigin), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.TaxationOrigin</div>
                        </div>
                        <div class="row py-1 border-bottom">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.TaxFiscalClassification), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.TaxFiscalClassification</div>
                        </div>
                        <div class="row py-1 border-bottom">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.ProductType), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.ProductType</div>
                        </div>
                        <div class="row py-1 border-bottom">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.CestCode), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.CestCode</div>
                        </div>
                        <div class="row py-1 border-bottom">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.FiscalGroupId), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.FiscalGroupId</div>
                        </div>
                        <div class="row py-1 border-bottom">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.ApproxTaxValueFederal), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.ApproxTaxValueFederal?.ToString("N2")</div>
                        </div>
                        <div class="row py-1 border-bottom">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.ApproxTaxValueState), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.ApproxTaxValueState?.ToString("N2")</div>
                        </div>
                        <div class="row py-1">
                            <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.TaxInformation.ApproxTaxValueCity), TypeTaxInfo)</div>
                            <div class="col-7">@Model.TaxInformation.ApproxTaxValueCity?.ToString("N2")</div>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Nenhuma informação disponível.</p>
                    }
                </div>
            </div>
            <div class="info-tab" id="tab7">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase w-100" onclick="toggleTab(this, 'tab7')">
                        OXFORD
                    </span>
                    <div class="d-flex gap-1">
                        <!-- Botões de ação, se desejar -->
                    </div>
                </div>
                <div class="info-content px-2 py-2">
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.FamilyDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.FamilyId} - {Model.Oxford.FamilyDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.BrandDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.BrandId} - {Model.Oxford.BrandDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.DecorationDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.DecorationId} - {Model.Oxford.DecorationDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.TypeDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.TypeId} - {Model.Oxford.TypeDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.ProcessDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.ProcessId} - {Model.Oxford.ProcessDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.SituationDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.SituationId} - {Model.Oxford.SituationDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.LineDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.LineId} - {Model.Oxford.LineDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.QualityDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.QualityId} - {Model.Oxford.QualityDescription}")</div>
                    </div>
                    <div class="row py-1 border-bottom">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.BaseProductDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.BaseProductId} - {Model.Oxford.BaseProductDescription}")</div>
                    </div>
                    <div class="row py-1">
                        <div class="col-5 fw-semibold">@GetDisplayName(nameof(Model.Oxford.ProductGroupDescription), TypeOxford)</div>
                        <div class="col-7">@($"{Model.Oxford.ProductGroupId} - {Model.Oxford.ProductGroupDescription}")</div>
                    </div>
                </div>
            </div>

            <div class="info-tab" id="tab8">
                <div class="info-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold text-uppercase w-100" onclick="toggleTab(this, 'tab8')">
                        BOM
                    </span>
                    <div class="d-flex gap-1">
                        <!-- Botões futuros, se necessário -->
                    </div>
                </div>
                <div class="info-content px-2 py-2">
                    <p class="text-muted">Em construção !!!</p>
                </div>
            </div>
        </div>
    </div>
</div>
@functions {
    private static readonly Type TypeProduct    = typeof(OXF.Models.Product);
    private static readonly Type TypeInvent     = typeof(OXF.Models.Invent);
    private static readonly Type TypeInventDim  = typeof(OXF.Models.InventDim);
    private static readonly Type TypeTaxInfo    = typeof(OXF.Models.TaxInformation);
    private static readonly Type TypeOxford     = typeof(OXF.Models.Oxford);

    string GetDisplayName(string propertyName, Type modelType)
    {
        var prop = modelType.GetProperty(propertyName);
        if (prop == null)
            return propertyName;

        var displayAttr = prop.GetCustomAttributes(typeof(DisplayAttribute), false)
                              .FirstOrDefault() as DisplayAttribute;

        return displayAttr?.Name ?? propertyName;
    }

    string GetDisplayNameProduct(string propertyName)
    {
        var prop = typeof(OXF.Models.Product).GetProperty(propertyName);
        if (prop == null)
            return propertyName;

        var displayAttr = prop.GetCustomAttributes(typeof(DisplayAttribute), false)
                              .FirstOrDefault() as DisplayAttribute;

        return displayAttr?.Name ?? propertyName;
    }
}
@section Styles {
    <link rel="stylesheet" href="~/css/produto.css?v=1.3" />
    <style>
        .carousel-btn {
            background-color: transparent;
            border: none;
            cursor: pointer;
            z-index: 10;
        }

        .thumbnail-row {
            position: relative;
            margin: 1rem 0;
        }

        .thumb-container-horizontal {
            overflow-x: auto;
            white-space: nowrap;
            padding: 0 1rem;
            scroll-behavior: smooth;
        }

        .thumb-wrapper {
            display: inline-block;
        }

        .img-thumbnail {
            max-width: 100px;
            height: auto;
        }

        .sortable-ghost {
            opacity: 0.4;
        }
    </style>
}

@section Scripts {
    @* Extrai o token no servidor *@
    @{
        var token = antiforgery.GetAndStoreTokens(HttpContext);
    }

    <script src="~/js/sortable.min.js"></script>
    <script src="~/js/produto1.js?v=1.4"></script>

    <script>
        window.produtoId = '@Model.Produto?.ProductId';
        window.token = '@token.RequestToken';

        window.imagens = {
            EMBALAGEM: @Html.Raw(Json.Serialize(Model.ImgPackage ?? new List<string>())),
            PRODUTO: @Html.Raw(Json.Serialize(Model.ImgProduto ?? new List<string>())),
            PALETIZACAO: @Html.Raw(Json.Serialize(Model.ImgPallet ?? new List<string>()))
        };

        window.currentImageIndex_EMBALAGEM = (window.imagens.EMBALAGEM.length > 0) ? 0 : -1;
        window.currentImageIndex_PRODUTO = (window.imagens.PRODUTO.length > 0) ? 0 : -1;
        window.currentImageIndex_PALETIZACAO = (window.imagens.PALETIZACAO.length > 0) ? 0 : -1;

    </script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
}